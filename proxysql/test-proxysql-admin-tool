#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      DEFAULT_TESTING = (yes no)
#      QA_ARGS
#      PXC_VERSION = (PXC57 PXC80)

set -o errexit
set -o xtrace

if [ -f /usr/bin/yum ]; then
  RHEL=$(rpm --eval %rhel)
  if [[ $RHEL -eq 8 ]]; then
     sudo dnf module disable mysql -y
  fi
fi

function process_proxysql_output {
# parameters are:
  local TESTSUITE=${1}
  local INFILE=${2}
  local OUTFILE=${3}
  export LC_ALL=C
  cat ${INFILE} | grep 'ok \|not ok' | gawk 'BEGIN     { print "<testsuite name=\"@@TESTSUITE@@\" tests=\"@@PASSED@@\" failures=\"@@FAILURES@@\">" }
      $1 ~ /ok/     { printf "\t<testcase name=\"%s\"><passed/></testcase>\n", $0}
      $1 ~ /not/    { printf "\t<testcase name=\"%s\"><failure/></testcase>\n", $0}
      END { print "</testsuite>" }' > ${OUTFILE}

  PASSED=$(grep -c 'name=\"ok' ${OUTFILE} ||:)
  FAILURES=$(grep -c '<failure/>' ${OUTFILE} ||:)

  sed -i.bak -e "s:@@TESTSUITE@@:${TESTSUITE}:g" ${OUTFILE}
  sed -i.bak -e "s:@@PASSED@@:${PASSED}:g" ${OUTFILE}
  sed -i.bak -e "s:@@FAILURES@@:${FAILURES}:g" ${OUTFILE}
}

function enable_repo {
# parameters are:
  local repo_name=$1
  local repo_type=$2

  sudo percona-release enable $repo_name $repo_type
}

function install_package {
# parameters are stored in array varible:
  local -a pkg_name_arr=("$@")

  if [ -f /usr/bin/yum ]; then
    for file in ${pkg_name_arr[@]}; do
      sudo yum install -y $file
    done
  elif [ -f /usr/bin/apt ]; then
    for file in ${pkg_name_arr[@]}; do
      sudo apt-get update -y
      sudo apt-get install -y $file
    done
  fi
}

function update_git_version {
    git --version | awk '{print $3}'
    if [ -f /usr/bin/yum ]; then
        if [[ $RHEL -eq 7 ]]; then
            sudo yum -y remove git-*
            sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
            sudo yum -y install git
        fi
    elif [ -f /usr/bin/apt ]; then
        sudo add-apt-repository ppa:git-core/ppa
        sudo apt update
        sudo apt -y install git
    fi
    git --version | awk '{print $3}'
}

function install_golang {
    wget -q https://golang.org/dl/go1.16.3.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    go version
    command -v go
}

cd /tmp
pwd
ls -la

update_git_version
install_golang
git clone ${PAT_REPO}
cd proxysql-admin-tool
git checkout ${PAT_TAG}
git submodule update --init --recursive
pushd percona-scheduler
sudo /usr/local/go/bin/go build -v -a -o pxc_scheduler_handler
./pxc_scheduler_handler --version
popd
cp percona-scheduler/pxc_scheduler_handler .

sudo bash -x ./tests/setup_workdir.sh /tmp/results
sudo chmod a+w /tmp/results

sudo bash -x ./tests/proxysql-admin-testsuite.sh /tmp/results/ | tee /tmp/results/proxysql_qa.output || status=$?
ls -la /tmp/results
process_proxysql_output PROXYSQL "/tmp/results/proxysql_qa.output" "/tmp/results/junit.xml"

sudo bash -x ./tests/proxysql-admin-testsuite.sh --ipv6 /tmp/results/ | tee /tmp/results/proxysql_qa_ipv6.output || status=$?
ls -la /tmp/results
process_proxysql_output PROXYSQL "/tmp/results/proxysql_qa_ipv6.output" "/tmp/results/junit_ipv6.xml"

exit $status

# Running ProxySQL QA script
sudo cp /etc/hosts ${WORKDIR_ABS}/hosts.new
sudo sed -i 's/::1*.*localhost /::1 /' ${WORKDIR_ABS}/hosts.new
sudo cp -f ${WORKDIR_ABS}/hosts.new /etc/hosts

sudo bash $WORKDIR_ABS/PROXY_ADMIN/proxysql*/tests/proxysql-admin-testsuite.sh \
$WORKDIR_ABS/WORKDIR | tee $WORKDIR_ABS/WORKDIR/proxysql_qa.output || status=$?

process_proxysql_output PROXYSQL "$WORKDIR_ABS/WORKDIR/proxysql_qa.output" "${WORKDIR_ABS}/WORKDIR/junit.xml"

sudo bash -x ./tests/proxysql-admin-testsuite.sh --ipv6 /tmp/results/ | tee /tmp/results/proxysql_qa_ipv6.output || status=$?

exit $status
