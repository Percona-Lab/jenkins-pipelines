#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      PAT_TAG

set -o errexit
set -o xtrace

if [ -f /usr/bin/yum ]; then
    RHEL=$(rpm --eval %rhel)
    if [[ $RHEL -eq 8 ]]; then
        sudo yum -y install python2 gnutls-devel libtool libuuid libuuid-devel perl-IPC-Cmd || true
        sudo yum remove -y cmake
        sudo wget https://github.com/Kitware/CMake/releases/download/v3.19.8/cmake-3.19.8.tar.gz
        sudo tar -zxf cmake-3.19.8.tar.gz
        cd cmake-3.19.8/
        sudo ./bootstrap
        sudo make
        sudo make install
        sudo ln -s /usr/local/bin/cmake /usr/bin/cmake
        sudo cmake --version
    fi
    sudo yum -y install wget
    if [[ $RHEL -eq 7 ]]; then
      sudo yum -y install automake bzip2 cmake3 make gcc-c++ gcc git openssl openssl-devel gnutls gnutls-devel libtool patch libuuid libuuid-devel perl-IPC-Cmd
      if [ -f /usr/bin/cmake3 ]; then
        sudo mv /usr/bin/cmake /usr/bin/cmake2
        sudo ln -s /usr/bin/cmake3 /usr/bin/cmake
      fi
    fi
elif [ -f /usr/bin/apt ]; then
  DEBIAN_VERSION=$(lsb_release -sc)
  if [ ${DEBIAN_VERSION} = "stretch" ]; then
    sudo sed -i s/deb.debian.org/archive.debian.org/g /etc/apt/sources.list
    sudo sed -i 's|security.debian.org|archive.debian.org|g' /etc/apt/sources.list
    sudo sed -i '/stretch-updates/d' /etc/apt/sources.list
    sudo apt-get -y update
    sudo apt-get install -y uuid-dev
  else
    sudo apt-get install -y uuid-dev
  fi
  if [ ${DEBIAN_VERSION} = "bionic" -o ${DEBIAN_VERSION} = "buster" -o ${DEBIAN_VERSION} = "stretch" ]; then
    sudo wget https://github.com/Kitware/CMake/releases/download/v3.19.8/cmake-3.19.8.tar.gz
    sudo tar -zxvf cmake-3.19.8.tar.gz
    cd cmake-3.19.8/
    sudo ./bootstrap
    sudo make
    sudo make install
    PATH=$PATH:/usr/local/bin
    sudo cmake --version
  fi
fi

# We need to use golang version > 1.16. Downloading golang from tarball to ensure each platform uses the same version.
sudo wget https://dl.google.com/go/go1.17.7.linux-amd64.tar.gz

# /usr/local is the default path included in the $PATH variable. Using any other custom installation path will not work
# Example:
# sudo tar -C /usr/local/bin -xzf go1.17.7.linux-amd64.tar.gz
# PATH=$PATH:/usr/local/bin
#
# The above method will not work. This is because the value of $PATH is not preserved/passed on to the child scipt from the parent script
# Hence using the default $PATH that is available to every new session (both parent and child script)
sudo tar -C /usr/local/ -xzf go1.17.7.linux-amd64.tar.gz
sudo cp /usr/local/go/bin/go /usr/local/bin/go
if [ -f /usr/bin/yum ]; then
  RHEL=$(rpm --eval %rhel)
  if [[ $RHEL -eq 8 ]]; then
    sudo ln -s /usr/local/go/bin/go /usr/bin/go
  fi
fi

WORKDIR_ABS=$(cd ${1:-./build/proxysql}; pwd -P)
SOURCE_DIR=$(cd ${2:-./build/proxysql}; pwd -P)

status=0
sudo sed -i "4 a PAT_TAG=${PAT_TAG}" ${SOURCE_DIR}/proxysql-packaging/scripts/build_binary.sh
[ -f /opt/rh/devtoolset-8/enable ] && source /opt/rh/devtoolset-8/enable
sudo bash -x ${SOURCE_DIR}/proxysql-packaging/scripts/build_binary.sh ${WORKDIR_ABS} || status=$?
exit $status
