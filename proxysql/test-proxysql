#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      DEFAULT_TESTING = (yes no)
#      QA_ARGS
#      PXC_VERSION = (PXC57 PXC80)

set -o errexit
set -o xtrace

if [ -f /usr/bin/yum ]; then
  RHEL=$(rpm --eval %rhel)
  if [[ $RHEL -eq 8 ]]; then
     sudo dnf module disable mysql -y
  fi
fi

function process_proxysql_output {
# parameters are:
  local TESTSUITE=${1}
  local INFILE=${2}
  local OUTFILE=${3}
  export LC_ALL=C
  cat proxysql_qa.output | grep 'ok \|not ok' | gawk 'BEGIN     { print "<testsuite name=\"@@TESTSUITE@@\" tests=\"@@PASSED@@\" failures=\"@@FAILURES@@\">" }
      $1 ~ /ok/     { printf "\t<testcase name=\"%s\"><passed/></testcase>\n", $0}
      $1 ~ /not/    { printf "\t<testcase name=\"%s\"><failure/></testcase>\n", $0}
      END { print "</testsuite>" }' > ${OUTFILE}

  PASSED=$(grep -c 'name=\"ok' ${OUTFILE} ||:)
  FAILURES=$(grep -c '<failure/>' ${OUTFILE} ||:)

  sed -i.bak -e "s:@@TESTSUITE@@:${TESTSUITE}:g" ${OUTFILE}
  sed -i.bak -e "s:@@PASSED@@:${PASSED}:g" ${OUTFILE}
  sed -i.bak -e "s:@@FAILURES@@:${FAILURES}:g" ${OUTFILE}
}

function enable_repo {
# parameters are:
  local repo_name=$1
  local repo_type=$2

  sudo percona-release enable $repo_name $repo_type
}

function install_package {
# parameters are stored in array varible:
  local -a pkg_name_arr=("$@")

  if [ -f /usr/bin/yum ]; then
    for file in ${pkg_name_arr[@]}; do
      sudo yum install -y $file
    done
  elif [ -f /usr/bin/apt ]; then
    for file in ${pkg_name_arr[@]}; do
      sudo apt-get update -y
      sudo apt-get install -y $file
    done
  fi
}

WORKDIR_ABS=$(cd ${1:-./build/proxysql}; pwd -P)
rm -rf ${WORKDIR_ABS}/WORKDIR ${WORKDIR_ABS}/PROXY_ADMIN
mkdir -p ${WORKDIR_ABS}/PROXY_ADMIN ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/usr/bin ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/etc

if [ -f /usr/bin/yum ]; then
# Installing proxysql 2.0.latest package
  enable_repo proxysql testing
  install_package proxysql2

  if [[ "${PXC_VERSION}" == "PXC80" ]]; then
# Downloading PXC-8.0 tarball package
    sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster_8.0.23-14.1_Linux.x86_64.glibc2.17-minimal.tar.gz https://www.percona.com/downloads/Percona-XtraDB-Cluster-LATEST/Percona-XtraDB-Cluster-8.0.23/binary/tarball/Percona-XtraDB-Cluster_8.0.23-14.1_Linux.x86_64.glibc2.17-minimal.tar.gz

# Installing PXC-8.0 client package
    enable_repo pxc-80 release
    install_package percona-xtradb-cluster-client
  elif [[ "${PXC_VERSION}" == "PXC57" ]]; then
# Downloading PXC-5.7 tarball package
    sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster-5.7.34-rel37-51.1.Linux.x86_64.glibc2.12-minimal.tar.gz  https://www.percona.com/downloads/Percona-XtraDB-Cluster-57/Percona-XtraDB-Cluster-5.7.34-31.51/binary/tarball/Percona-XtraDB-Cluster-5.7.34-rel37-51.1.Linux.x86_64.glibc2.12-minimal.tar.gz

# Installing PXC-5.7 client package
    enable_repo pxc-57 release
    install_package Percona-XtraDB-Cluster-client-57

# Installing PXB-2.4 (only required in case of PXC-5.7)
    enable_repo pxb-24 release
    install_package percona-xtrabackup-24
  fi
elif [ -f /usr/bin/apt ]; then
# In Linux distributions that rely on dpkg, the packages wget, gnupg2, curl and lsb-release are already installed. However, these packages may be missing from Docker base images. In this case, install them manually before running dpkg
  install_package wget gnupg2 lsb-release curl

# Installing proxysql 2.0.latest package
  enable_repo proxysql testing
  install_package proxysql2

  if [[ "${PXC_VERSION}" == "PXC80" ]]; then
# Downloading PXC-8.0 tarball package
    sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster_8.0.23-14.1_Linux.x86_64.glibc2.17-minimal.tar.gz https://www.percona.com/downloads/Percona-XtraDB-Cluster-LATEST/Percona-XtraDB-Cluster-8.0.23/binary/tarball/Percona-XtraDB-Cluster_8.0.23-14.1_Linux.x86_64.glibc2.17-minimal.tar.gz

# Installing PXC-8.0 client package
    enable_repo pxc-80 release
    install_package percona-xtradb-cluster-client
  elif [[ "${PXC_VERSION}" == "PXC57" ]]; then
# Downloading PXC-5.7 tarball package
    sudo wget -q -O ${WORKDIR_ABS}/WORKDIR/Percona-XtraDB-Cluster-5.7.34-rel37-51.1.Linux.x86_64.glibc2.12-minimal.tar.gz  https://www.percona.com/downloads/Percona-XtraDB-Cluster-57/Percona-XtraDB-Cluster-5.7.34-31.51/binary/tarball/Percona-XtraDB-Cluster-5.7.34-rel37-51.1.Linux.x86_64.glibc2.12-minimal.tar.gz

# Installing PXC-5.7 client
    enable_repo pxc-57 release
    install_package percona-xtradb-cluster-client-5.7

# Installing PXB-2.4 (only required in case of PXC-5.7)
    enable_repo pxb-24 release
    install_package percona-xtrabackup-24
  fi
fi

pushd ${WORKDIR_ABS}/WORKDIR
sudo tar -xzf $WORKDIR_ABS/proxysql*glibc*.tar.gz -C ${WORKDIR_ABS}/PROXY_ADMIN
for file in proxysql-admin proxysql-admin-common proxysql-login-file; do
  sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/usr/bin/$file ${WORKDIR_ABS}/WORKDIR/$file
done;
sudo ln -s $WORKDIR_ABS/PROXY_ADMIN/proxysql*/etc/proxysql-admin.cnf ${WORKDIR_ABS}/WORKDIR/proxysql-2.0/etc/proxysql-admin.cnf
sudo ln -s /usr/bin/proxysql $WORKDIR_ABS/WORKDIR/proxysql-2.0/usr/bin/proxysql
status=0

# Running ProxySQL QA script
sudo cp /etc/hosts ${WORKDIR_ABS}/hosts.new
sudo sed -i 's/::1*.*localhost /::1 /' ${WORKDIR_ABS}/hosts.new
sudo cp -f ${WORKDIR_ABS}/hosts.new /etc/hosts

sudo sed -i 's/wsrep_sst_method=rsync/wsrep_sst_method=xtrabackup-v2/g' $WORKDIR_ABS/PROXY_ADMIN/proxysql*/tests/proxysql-admin-testsuite.sh
sudo bash $WORKDIR_ABS/PROXY_ADMIN/proxysql*/tests/proxysql-admin-testsuite.sh \
$WORKDIR_ABS/WORKDIR | tee $WORKDIR_ABS/WORKDIR/proxysql_qa.output || status=$?
process_proxysql_output PROXYSQL "$WORKDIR_ABS/WORKDIR/proxysql_qa.output" "${WORKDIR_ABS}/WORKDIR/junit.xml"
popd

exit $status
