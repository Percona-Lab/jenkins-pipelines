- job:
    block-downstream: false
    block-upstream: false
    builders:
    - shell: echo "###DESCRIPTION###${DESCRIPTION}###"
    - description-setter:
        regexp: "^###DESCRIPTION###(.*)###$"
    - shell: |-
        result=$(hostname | grep -c "min.*xenial" || true)
        if [ "${result}" -eq 0 ]; then
          result=$(hostname | grep -c "mongodb.*xenial" || true)
        fi
        if [ "${result}" -eq 0 ]; then
          result=$(hostname | grep -c "bigram.*xenial" || true)
        fi
        # we need to setup the instance first
        # disable THP
        echo "echo never > /sys/kernel/mm/transparent_hugepage/enabled" > disable-thp.sh
        echo "echo never > /sys/kernel/mm/transparent_hugepage/defrag" >> disable-thp.sh
        chmod +x disable-thp.sh
        sudo -n ./disable-thp.sh
        rm -f disable-thp.sh

        echo "----------------"
        echo "HOST INFO:"
        echo "HOSTNAME: $(hostname)"
        echo "OPENSTACK_PUBLIC_IP: ${OPENSTACK_PUBLIC_IP}"
        echo "USER: $(id)"
        echo "DISK SPACE"
        df -h
        echo "MEMORY"
        free -m
        echo "LIMITS"
        ulimit -a
        echo "NETWORK"
        ip addr show
        echo "Transparent huge pages status:"
        cat /sys/kernel/mm/transparent_hugepage/enabled
        echo "----------------"
        #
        if [ $(grep -c $(hostname) /etc/hosts) -eq 0 ]; then
          sudo sed -i "s/localhost/$(hostname) localhost/" /etc/hosts
          echo "### HOSTS FILE AFTER ADDING HOSTNAME ###"
          cat /etc/hosts
        fi
        #
        sudo rm -rf /mnt/data /data
        sudo mkdir /mnt/data
        sudo chmod 777 /mnt/data
        sudo ln -s /mnt/data /data
        #
        if [ ! -f /usr/local/go/bin/go ]; then
          rm -f go1.9.2.linux-amd64.tar.gz
          wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz
        fi
        export PATH=$PATH:/usr/local/go/bin:$HOME/.local/bin
        #
        sudo apt-get update
        sudo apt-get -y install curl build-essential g++-5 gcc-5 libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev python-ptyprocess scons libsasl2-dev pkg-config libpcap0.8-dev libssl-dev cmake libcurl4-openssl-dev python-dev
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py --user
        pip install --user -r percona-server-mongodb/etc/pip/dev-requirements.txt
        #sudo pip install -r percona-server-mongodb/buildscripts/requirements.txt

        sudo percona-server-mongodb/support-files/ldap-sasl/deploy_ldap_and_sasl.sh
        # https://docs.mongodb.com/manual/tutorial/configure-ldap-sasl-openldap/#test-the-saslauthd-configuration
        sudo chmod 755 /var/run/saslauthd
        sudo percona-server-mongodb/support-files/ldap-sasl/check_saslauthd.sh
        sudo apt-get clean all
    - shell: |-
        # clean workspace
        if [ "${RELEASE_TEST}" = "true" ]; then
          rm -rf ${WORKSPACE}/*
        fi

        #cleanup
        killall -9 mongos || true
        killall -9 mongod || true
        pkill -f killer.sh || true
    - shell: |-
        if [ "${RELEASE_TEST}" != "true" ]; then
        # prepare source
        #
        #git clone ${PSM_REPO}
        cd percona-server-mongodb
        #git checkout ${PSM_BRANCH}
        REVISION=$(git rev-parse --short HEAD)
        REVISION_LONG=$(git rev-parse HEAD)
        # Need to fetch tags from upstream to be able to describe the commit with version
        #if [ "${WORKFLOW_TYPE}" = "param" ]; then
        git remote add upstream https://github.com/mongodb/mongo.git
        git fetch upstream --tags
        #fi
        PSM_VERSION=$(git describe --tags | sed 's/^psmdb-//' | sed 's/^r//' | awk -F '-' '{print $1}')
        PSM_RELEASE=$(git describe --tags | sed 's/^psmdb-//' | sed 's/^r//' |awk -F '-' '{print $2}')
        # create a proper version.json
        echo "{" > version.json
        echo "    \"version\": \"${PSM_VERSION}-${PSM_RELEASE}\"," >> version.json
        echo "    \"githash\": \"${REVISION_LONG}\"" >> version.json
        echo "}" >> version.json
        #
        # submodules
        git submodule init
        git submodule update
        #
        #rm -rf mongo-tools
        #git clone https://github.com/mongodb/mongo-tools.git
        #pushd mongo-tools
        ##git checkout v3.6
        ##MONGO_TOOLS_TAG=$(git describe --tags | awk -F '-' '{print $1}')
        #MONGO_TOOLS_TAG=$(git describe --tags)
        ##git checkout $MONGO_TOOLS_TAG
        echo "export PSMDB_TOOLS_COMMIT_HASH=\"$(git rev-parse HEAD)\"" > src/mongo/gotools/set_tools_revision.sh
        echo "export PSMDB_TOOLS_REVISION=\"${PSM_VERSION}-${PSM_RELEASE}\"" >> src/mongo/gotools/set_tools_revision.sh
        chmod +x src/mongo/gotools/set_tools_revision.sh
        #popd
        #
        cd ${WORKSPACE}
        fi
        rm -rf psmdb-misc-scripts
        git clone ${MISC_SCRIPTS_REPO}
        if [ "$MISC_SCRIPTS_TAG" != "master" -a ! -z "$MISC_SCRIPTS_TAG" ]; then
          pushd psmdb-misc-scripts
          git checkout $MISC_SCRIPTS_TAG
          popd
        fi
    - shell: |-
        if [ "${RELEASE_TEST}" != "true" ]; then
        # build binaries
        if [ -f /opt/percona-devtoolset/enable ]; then
          source /opt/percona-devtoolset/enable
        fi
        #
        export PATH=/usr/local/go/bin:$PATH
        #
        if [ -f /etc/debian_version ]; then
          export CC=gcc-5
          export CXX=g++-5
        else
          export CC=$(which gcc)
          export CXX=$(which g++)
        fi
        #
        if [ "${ASAN_RUN}" = "true" ]; then
          ASAN_OPTIONS="--allocator=system --sanitize=address"
        fi
        #
        if [ -n "${CUSTOM_SUITE}" ]; then
          UNITTESTS=$(echo "${CUSTOM_SUITE}" | grep -c "^unittests" || true)
          DBTESTS=$(echo "${CUSTOM_SUITE}" | grep -c "^dbtest" || true)
          INTEGRATIONTESTS=$(echo "${CUSTOM_SUITE}" | grep -c "^integration_tests" || true)
          BENCHMARKTESTS=$(echo "${CUSTOM_SUITE}" | grep -c "^benchmarks" || true)
        else
          UNITTESTS=$(grep -c "^unittests" psmdb-misc-scripts/suite_sets/${SUITE}.txt || true)
          DBTESTS=$(grep -c "^dbtest" psmdb-misc-scripts/suite_sets/${SUITE}.txt || true)
          INTEGRATIONTESTS=$(grep -c "^integration_tests" psmdb-misc-scripts/suite_sets/${SUITE}.txt || true)
          BENCHMARKTESTS=$(grep -c "^benchmarks" psmdb-misc-scripts/suite_sets/${SUITE}.txt || true)
        fi
        if [ "${UNITTESTS}" -gt 0 ]; then
          OPT_TARGETS=" unittests"
        else
          OPT_TARGETS=""
        fi
        if [ "${DBTESTS}" -gt 0 ]; then
          OPT_TARGETS="${OPT_TARGETS} dbtest"
        else
          OPT_TARGETS="${OPT_TARGETS}"
        fi
        if [ "${INTEGRATIONTESTS}" -gt 0 ]; then
          OPT_TARGETS="${OPT_TARGETS} integration_tests"
        else
          OPT_TARGETS="${OPT_TARGETS}"
        fi
        if [ "${BENCHMARKTESTS}" -gt 0 ]; then
          OPT_TARGETS="${OPT_TARGETS} benchmarks"
        else
          OPT_TARGETS="${OPT_TARGETS}"
        fi
        PSM_TARGETS="mongod mongos mongo mongobridge${OPT_TARGETS}"
        TARBALL_SUFFIX=""
        if [ -f /etc/debian_version ]; then
          export OS_RELEASE="$(lsb_release -sc)"
        fi
        #
        if [ -f /etc/redhat-release ]; then
          export OS_RELEASE="centos$(lsb_release -sr | awk -F'.' '{print $1}')"
          RHEL=$(rpm --eval %rhel)
        fi
        #
        ARCH=$(uname -m 2>/dev/null||true)
        PSMDIR=percona-server-mongodb
        PSMDIR_ABS=${WORKSPACE}/percona-server-mongodb
        TOOLSDIR=${PSMDIR}/src/mongo/gotools
        TOOLSDIR_ABS=${WORKSPACE}/${TOOLSDIR}
        TOOLS_TAGS="ssl sasl"

        NJOBS=$(grep -c processor /proc/cpuinfo)

        # link PSM dir to /tmp to avoid "argument list too long error"
        rm -fr /tmp/${PSMDIR}
        ln -fs ${PSMDIR_ABS} /tmp/${PSMDIR}
        cd /tmp
        #
        export CFLAGS="${CFLAGS:-} -fno-omit-frame-pointer"
        export CXXFLAGS="${CFLAGS}"
        export INSTALLDIR=${WORKSPACE}/install
        #
        rm -rf ${INSTALLDIR}
        mkdir -p ${INSTALLDIR}/include
        mkdir -p ${INSTALLDIR}/bin
        mkdir -p ${INSTALLDIR}/lib
        #
        # Finally build Percona Server for MongoDB with SCons
        cd ${PSMDIR_ABS}
        if [ "${BUILD_TYPE}" = "debug" ]; then
          buildscripts/scons.py CC=${CC} CXX=${CXX} --ssl --disable-warnings-as-errors --dbg=on -j$NJOBS --use-sasl-client --wiredtiger --audit --inmemory --hotbackup ${ASAN_OPTIONS} CPPPATH=${INSTALLDIR}/include LIBPATH=${INSTALLDIR}/lib ${PSM_TARGETS}
        else
          buildscripts/scons.py CC=${CC} CXX=${CXX} --release --ssl --opt=on -j$NJOBS --use-sasl-client --wiredtiger --audit --inmemory --hotbackup ${ASAN_OPTIONS} CPPPATH=${INSTALLDIR}/include LIBPATH=${INSTALLDIR}/lib ${PSM_TARGETS}
        fi
        #
        # scons install doesn't work - it installs the binaries not linked with fractal tree
        #scons --prefix=$PWD/$PSMDIR install
        #
        #mkdir -p ${PSMDIR}/bin
        #for target in ${PSM_TARGETS[@]}; do
        #  cp -f $target ${PSMDIR}/bin
        #  strip --strip-debug ${PSMDIR}/bin/${target}
        #done
        #
        cd ${WORKSPACE}
        #
        # Build mongo tools
        cd ${TOOLSDIR}
        rm -rf vendor/pkg
        [[ ${PATH} == *"/usr/local/go/bin"* && -x /usr/local/go/bin/go ]] || export PATH=/usr/local/go/bin:${PATH}
        . ./set_gopath.sh
        . ./set_tools_revision.sh
        mkdir -p bin
        for i in bsondump mongostat mongofiles mongoexport mongoimport mongorestore mongodump mongotop mongoreplay; do
          echo "Building ${i}..."
          go build -a -o "bin/$i" -ldflags "-X github.com/mongodb/mongo-tools/common/options.Gitspec=${PSMDB_TOOLS_COMMIT_HASH} -X github.com/mongodb/mongo-tools/common/options.VersionStr=${PSMDB_TOOLS_REVISION}" -tags "${TOOLS_TAGS}" "$i/main/$i.go"
        done
        # move mongo tools to PSM root dir for running tests
        mv bin/* ${PSMDIR_ABS}
        # end build tools
        fi
    - shell: |-
        # run tests
        cd ${WORKSPACE}
        PSMDIR="percona-server-mongodb"
        PSMDIR_ABS=${WORKSPACE}/${PSMDIR}
        DISTRIBUTION="xenial"

        if [ "${RELEASE_TEST}" = "true" ]; then
          wget http://jenkins.percona.com/job/percona-server-mongodb-3.4-SOURCE/lastSuccessfulBuild/artifact/percona-server-mongodb-34.properties
          PSM_VERSION=$(grep '^VERSION=' percona-server-mongodb-34.properties|cut -d'=' -f2)
          PSM_RELEASE=$(grep '^RELEASE=' percona-server-mongodb-34.properties|cut -d'=' -f2)
          wget http://jenkins.percona.com/job/percona-server-mongodb-3.4-SOURCE/lastSuccessfulBuild/artifact/percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}.tar.gz
          wget http://jenkins.percona.com/job/percona-server-mongodb-3.4-TARBALL-release/label_exp=ubuntu-xenial-64bit/lastSuccessfulBuild/artifact/percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}-${DISTRIBUTION}-x86_64.tar.gz
          if [ ! -f "percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}.tar.gz" ]; then
            echo "Tarball percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}.tar.gz doesn't exists!"
            exit 1
          fi
          if [ ! -f "percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}-${DISTRIBUTION}-x86_64.tar.gz" ]; then
            echo "Tarball percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}-${DISTRIBUTION}-x86_64.tar.gz doesn't exists!"
            exit 1
          fi
          tar xf percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}.tar.gz
          tar xf percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}-${DISTRIBUTION}-x86_64.tar.gz
          mv percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}/bin/* percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE}
          mv percona-server-mongodb-${PSM_VERSION}-${PSM_RELEASE} ${PSMDIR}
        fi

        if [ "$JOBS" != "auto" ]; then
          sed -i "s/^RESMOKE_JOBS=.*$/RESMOKE_JOBS=${JOBS}/" psmdb-misc-scripts/run_resmoke_psmdb_3.2.sh
        fi
        if [ -n "${CUSTOM_SUITE}" ]; then
          echo "${CUSTOM_SUITE}" > psmdb-misc-scripts/suite_sets/custom.txt
          TEST_SUITE_FILE="custom.txt"
        else
          TEST_SUITE_FILE="${SUITE}.txt"
        fi

        cd ${PSMDIR_ABS}
        find build/opt -type f -name '*.a' -delete || true
        find build/opt -type f -name '*.o' -delete || true
        touch killer.log
        if [ "${ENABLE_KILLER}" = "true" ]; then
          ../psmdb-misc-scripts/killer.sh &
        fi

        for trial in `seq 1 ${NUM_TRIALS}`;
        do
        ../psmdb-misc-scripts/run_resmoke_psmdb_3.2.sh ${trial} ${TEST_SUITE_FILE}
        done

        ../psmdb-misc-scripts/resmoke2junit.py

        tar czf resmoke_logs.tar.gz  *.log *.json *.xml

        #cleanup
        killall -9 mongos || true
        killall -9 mongod || true
        pkill -f killer.sh || true
    concurrent: false
    description: null
    disabled: true
    name: !!python/unicode 'percona-server-for-mongodb-master-template'
    project-type: freestyle
    properties:
    - disk-usage
    publishers:
    - warnings:
        console-log-parsers:
          - GNU Make + GNU C Compiler (gcc)
    - archive:
        artifacts: 'percona-server-mongodb/resmoke_summary*.log, percona-server-mongodb/killer.log, percona-server-mongodb/resmoke_logs.tar.gz, percona-server-mongodb/perf.json, percona-server-mongodb/perf_sharding.json'
        allow-empty: false
        fingerprint: false
        default-excludes: true
        only-if-success: false
        case-sensitive: true
    - junit:
        results: 'percona-server-mongodb/junit.xml'
        keep-long-stdio: false
        health-scale-factor: 1.0
        allow-empty-results: false
    triggers: []
    wrappers: []
