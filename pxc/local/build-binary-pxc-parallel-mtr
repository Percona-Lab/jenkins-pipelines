#!/bin/bash

set -o errexit
set -o xtrace


# ------------------------------------------------------------------------------
# Declare all input variables
# ------------------------------------------------------------------------------
JOB_CMAKE=${JOB_CMAKE:-cmake}
COMPILER=${COMPILER:-default}
CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-RelWithDebInfo}
MAKE_OPTS=${MAKE_OPTS:--j$(grep -c ^processor /proc/cpuinfo)}
CMAKE_OPTS=${CMAKE_OPTS:-}
BUILD_COMMENT=${BUILD_COMMENT:-}
TAG=${TAG:-}
DIST_NAME=${DIST_NAME:-}
SSL_VER=${SSL_VER:-}
TARGET_CFLAGS=${TARGET_CFLAGS:-}
ANALYZER_OPTS=${ANALYZER_OPTS:-}


# ------------------------------------------------------------------------------
# set working dir
# ------------------------------------------------------------------------------
mkdir -p ${1:-./build}
WORKDIR=$(cd ${1:-./build}; pwd -P)
INSTALL_DIR=${WORKDIR}/DESTDIR
DOWNLOAD_DIR=${WORKDIR}/source_downloads
mkdir -p ${INSTALL_DIR} ${DOWNLOAD_DIR}
SOURCEDIR=$(cd ${2:-$(dirname $0)/../sources/pxc}; pwd -P)


df -h
du /dev/shm
mount
ls -la /dev/shm
cat /proc/meminfo

# TODO: Is it needed here?
if [ -f /etc/redhat-release ]; then
    RHEL=$(rpm --eval %rhel)
    if [ "${RHEL}" == 8 ]; then
        pushd /etc/yum.repos.d/
        sudo sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
        sudo sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
        popd
    fi
fi


# ------------------------------------------------------------------------------
# download external libs
# ------------------------------------------------------------------------------
wget_loop() {
    local FILE="$1"
    local URL="$2"

    if [[ ! -f "${DOWNLOAD_DIR}/${FILE}" ]]; then
        until wget --progress=dot:giga -O "${DOWNLOAD_DIR}/${FILE}" "${URL}"; do
            echo "sleep before retry"
            sleep 1
        done
    fi
}

BOOST_VERSION=$(grep 'SET(BOOST_PACKAGE_NAME' ${SOURCEDIR}/cmake/boost.cmake | sed -re 's/.*([0-9]+_[0-9]+_[0-9]+).*/\1/')
wget_loop "boost_${BOOST_VERSION}.tar.bz2" "http://downloads.sourceforge.net/boost/boost/${BOOST_VERSION//_/.}/boost_${BOOST_VERSION}.tar.gz"
GMOCK_VERSION=$(grep 'SET(GMOCK_PACKAGE_NAME' ${SOURCEDIR}/cmake/googletest.cmake | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
if [ -z ${GMOCK_VERSION} ]; then
    GMOCK_VERSION=$(grep 'SET(GOOGLETEST_RELEASE' ${SOURCEDIR}/cmake/googletest.cmake | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
fi
wget_loop "googletest-release-${GMOCK_VERSION}.zip" "https://github.com/google/googletest/archive/release-${GMOCK_VERSION}.zip"


# ------------------------------------------------------------------------------
# Set OS/Arch flags
# ------------------------------------------------------------------------------
TARGET_ARCH="$(uname -m)"

# ------------------------------------------------------------------------------
# Set Debug options
# ------------------------------------------------------------------------------
if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
    BUILD_COMMENT+="-debug"
    CMAKE_OPTS+=" -DDEBUG_EXTNAME=ON -DWITH_DEBUG=ON"
fi
if [[ "${ANALYZER_OPTS}" = *WITH_VALGRIND=ON* ]]; then
    BUILD_COMMENT+="-valgrind"
fi

DEB_VERSION=0
RHVER=0
if [[ -f /etc/redhat-release ]]; then
    RHVER="$(rpm --eval %rhel)"
else
    DEB_VERSION=$(lsb_release -d -s)
fi

# ------------------------------------------------------------------------------
# set version
# ------------------------------------------------------------------------------
if [ -f ${SOURCEDIR}/VERSION ]; then
    source "${SOURCEDIR}/VERSION"
elif [ -f ${SOURCEDIR}/MYSQL_VERSION ]; then
    source "${SOURCEDIR}/MYSQL_VERSION"
else
    echo "NO VERSION file found"
    exit 1
fi
if [[ -n "$(which git)" ]] && [[ -d "${SOURCEDIR}/.git" ]]; then
    REVISION="$(cd "${SOURCEDIR}"; git rev-parse --short HEAD)"
fi
MYSQL_VERSION="${MYSQL_VERSION_MAJOR}.${MYSQL_VERSION_MINOR}.${MYSQL_VERSION_PATCH}"
PERCONA_SERVER_VERSION="$(echo ${MYSQL_VERSION_EXTRA} | sed 's/^-//')"
PRODUCT="Percona-XtraDB-Cluster_${MYSQL_VERSION}-${PERCONA_SERVER_VERSION}"
TOKUDB_BACKUP_VERSION="${MYSQL_VERSION}${MYSQL_VERSION_EXTRA}"
PRODUCT_FULL="Percona-XtraDB-Cluster_${MYSQL_VERSION}-${PERCONA_SERVER_VERSION}${BUILD_COMMENT}-${TAG}$(uname -s)${DIST_NAME}.${TARGET_ARCH}${SSL_VER}"
COMMENT="Percona XtraDB Cluster binary  (GPL), Release ${MYSQL_VERSION_EXTRA#-}, Revision ${REVISION:-}${BUILD_COMMENT}"
if [[ -n "$(which git)" ]] && [[ -f "${SOURCEDIR}/percona-xtradb-cluster-galera/.git" ]]; then
    pushd ${SOURCEDIR}/percona-xtradb-cluster-galera
    GALERA_REVISION=$(git rev-parse --short HEAD)
    popd
else
    # When in troubles while getting Galera commit hash, fall back to well known
    # and distinguishable value.
    GALERA_REVISION="0000000"
fi
PERCONA_SERVER_EXTENSION="$(echo ${MYSQL_VERSION_EXTRA} | sed 's/^-//')"

if [[ ${RHVER} -eq 6 ]] || [[ ${RHVER} -eq 7 ]]; then
    JOB_CMAKE='cmake3'
fi

PROCESSORS=$(grep -c ^processor /proc/cpuinfo)
COMMON_FLAGS="-DPERCONA_INNODB_VERSION=${PERCONA_SERVER_EXTENSION}"
export CFLAGS=" ${COMMON_FLAGS} -static-libgcc ${MACHINE_SPECS_CFLAGS} ${CFLAGS:-}"
export CXXFLAGS=" ${COMMON_FLAGS} ${MACHINE_SPECS_CFLAGS} ${CXXFLAGS:-}"
export MAKE_JFLAG="${MAKE_JFLAG:--j${PROCESSORS}}"

# ------------------------------------------------------------------------------
# Set compile options
# ------------------------------------------------------------------------------
if [[ "${COMPILER}" != "default" ]]; then
    export CC=${COMPILER}
    export CXX=$(echo ${COMPILER} | sed -e 's/gcc/g++/; s/clang/clang++/')
fi

# ------------------------------------------------------------------------------
# Finaly, compile!
# ------------------------------------------------------------------------------
pushd ${WORKDIR}
    ${JOB_CMAKE} \
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
        -DWITHOUT_ROCKSDB=ON \
        -DWITHOUT_TOKUDB=ON \
        -DWITH_SYSTEM_LIBS=ON \
        -DWITH_PROTOBUF=bundled \
        -DWITH_RAPIDJSON=bundled \
        -DWITH_ICU=bundled \
        -DWITH_LZ4=bundled \
        -DWITH_RE2=bundled \
        -DWITH_LIBEVENT=bundled \
        -DWITH_EDITLINE=bundled \
        -DWITH_ZLIB=bundled \
        -DWITH_ZSTD=bundled \
        -DWITH_FIDO=bundled \
        -DBUILD_CONFIG=mysql_release \
        -DFEATURE_SET=community \
        -DMYSQL_SERVER_SUFFIX="" \
        -DWITH_PAM=ON \
        -DWITH_NUMA=ON \
        -DFORCE_INSOURCE_BUILD=1 \
        -DWITH_INNODB_MEMCACHED=ON \
        -DDOWNLOAD_BOOST=1 \
        -DWITH_PACKAGE_FLAGS=OFF \
        -DWITH_BOOST=${DOWNLOAD_DIR} \
        -DCMAKE_INSTALL_PREFIX=/usr/local/${PRODUCT_FULL} \
        -DMYSQL_DATADIR=/usr/local/${PRODUCT_FULL}/data \
        -DCOMPILATION_COMMENT="${COMMENT}" \
        -DMYSQL_MAINTAINER_MODE=ON \
        ${TARGET_CFLAGS:+-DCMAKE_C_FLAGS="${TARGET_CFLAGS}" -DCMAKE_CXX_FLAGS="${TARGET_CFLAGS}"} \
        ${ANALYZER_OPTS} \
        ${CMAKE_OPTS} \
        ${SOURCEDIR}
    make ${MAKE_OPTS}
    make DESTDIR=${INSTALL_DIR} install > make_install.log
popd

# Copy all needed data for unit tests
if [[ "${CMAKE_BUILD_TYPE}" = "Debug" ]]; then
   cp -v /tmp/results/runtime_output_directory/mysqld-debug $INSTALL_DIR/usr/local/$PRODUCT_FULL/bin/mysqld
fi

#pushd ${WORKDIR}/runtime_output_directory
#shopt -s extglob
#rm !(*-t)
#popd

rm -rf ${WORKDIR}/runtime_output_directory/mysqld-debug
rm -rf ${WORKDIR}/runtime_output_directory/mysqld

cp -ra ${SOURCEDIR}/percona-xtradb-cluster-tests $INSTALL_DIR/usr/local/$PRODUCT_FULL/

cp ${WORKDIR}/scripts/mysqld_safe ${WORKDIR}/runtime_output_directory/
cp ${WORKDIR}/scripts/mysqldumpslow ${WORKDIR}/runtime_output_directory/
cp -ra ${WORKDIR}/unittest/gunit/*  ${INSTALL_DIR}/usr/local/${PRODUCT_FULL}/ || true

cp -ra ${WORKDIR}/runtime_output_directory ${INSTALL_DIR}/usr/local/${PRODUCT_FULL}/
cp -ra ${WORKDIR}/library_output_directory ${INSTALL_DIR}/usr/local/${PRODUCT_FULL}/
cp -ra ${WORKDIR}/plugin_output_directory ${INSTALL_DIR}/usr/local/${PRODUCT_FULL}/

tar -C ${INSTALL_DIR}/usr/local --owner=0 --group=0 -czf "${WORKDIR}/${PRODUCT_FULL}.tar.gz" ${PRODUCT_FULL}
