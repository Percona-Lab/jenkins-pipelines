#!/bin/bash
#
# Execute this tool to test binary releases
#
#  possible jenkins vars:
#      CMAKE_BUILD_TYPE = (RelWithDebInfo Debug)
#      DEFAULT_TESTING = (yes no)
#      MTR_ARGS
#      MTR_REPEAT
#      FULL_MTR = (yes no)
#      GALERA_PARALLEL_RUN
#      MTR_SUITES
#      PARALLEL_RUN
#      DOCKER_OS

set -o errexit
set -o xtrace

WORKDIR_ABS=$(cd ${1:-./build/pxc}; pwd -P)
rm -fr ${WORKDIR_ABS}/PXC
mkdir -p ${WORKDIR_ABS}/PXC/sql
rm -fr ${WORKDIR_ABS}/PXB
mkdir -p ${WORKDIR_ABS}/PXB
tar -C ${WORKDIR_ABS}/PXC --strip-components=1 -zxpf $(ls $WORKDIR_ABS/pxc57.tar.gz | head -1)
tar -C ${WORKDIR_ABS}/PXB --strip-components=1 -zxpf $(ls $WORKDIR_ABS/pxb24.tar.gz | head -1)

export WSREP_PROVIDER=${WORKDIR_ABS}/PXC/lib/libgalera_smm.so
export XB_PLUGIN_DIR=${WORKDIR_ABS}/PXB/lib/plugin
cd ${WORKDIR_ABS}/PXC/mysql-test
TESTCASE_TIMEOUT=30
# CentOS 6 & 7
if [[ -f /opt/rh/devtoolset-7/enable ]]; then
    source /opt/rh/devtoolset-7/enable
fi

sudo cp ${WORKDIR_ABS}/PXB/bin/* /usr/bin/

JEMALLOC=$(find /lib* /usr/lib* /usr/local/lib* -type f -name 'libjemalloc.so*' | head -n1)
EATMYDATA=$(find /lib* /usr/lib* /usr/local/lib* -type f -name '*eatmyda*.so*' | head -n1)

if [[ -z "${EATMYDATA}" ]]; then
  echo "No libeatmydata.so lib found"
  exit 1
fi

if [[ -z "${JEMALLOC}" ]]; then
  echo "No jemalloc lib found"
  exit 1
fi
MTR_ARGS+="  --big-test "

if [[ -n "${MTR_REPEAT}" ]]; then
  MTR_ARGS+=" --repeat=${MTR_REPEAT}"
fi

if [[ "${MTR_ARGS}" == *"--suite=max_parts"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 3))
fi

if [[ $MTR_ARGS == *"--big-test"* ]] || [[ $MTR_ARGS == *"--only-big-test"* ]]; then
    TESTCASE_TIMEOUT=$((TESTCASE_TIMEOUT * 2))
fi

status=0
#
# Running MTR test cases
if [[ "${DEFAULT_TESTING}" != "no" ]]; then
    if [[ "${ANALYZER_OPTS}" == *WITH_VALGRIND=ON* ]]; then
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${EATMYDATA}"
    else
        MYSQLD_ENV="${ADD_TO_LD_PRELOAD:-}${JEMALLOC}:${EATMYDATA}"
    fi
    mkdir mtr_var
    if [ ${FULL_MTR} == "no" ]; then
        ARRAY_MTR_SUITES=($(echo $MTR_SUITES | sed 's/,/ /g'))
        for suite in "${ARRAY_MTR_SUITES[@]}"; do
	        if [[ "$suite" == *"galera"* ]]; then
	            WORKER=$GALERA_PARALLEL_RUN
			else
	            WORKER=$PARALLEL_RUN
			fi
	        echo "Running MTR suite: $suite"
	        mkdir $PWD/var_${suite}
	        MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
	           --result-file --suite=$suite \
	           --force \
	           --max-test-fail=0 \
	           --suite-timeout=9999 --parallel $WORKER \
	           --port-group-size=20 --vardir=$PWD/var_${suite} \
	           --testcase-timeout=${TESTCASE_TIMEOUT} \
               ${MTR_ARGS} \
               --junit-output=${WORKDIR_ABS}/junit_${suite}.xml \
               --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.${suite}" || true

            mv $PWD/var_${suite} $PWD/mtr_var    
	        killall -9 mysqld || true
		done
    else
        echo "Running full MTR"
        mkdir var
        MTR_BUILD_THREAD=auto ./mysql-test-run.pl \
           --result-file \
           --force \
           --max-test-fail=0 \
           --suite-timeout=9999 --parallel $PARALLEL_RUN \
           --port-group-size=20 --vardir=var \
           --testcase-timeout=${TESTCASE_TIMEOUT} \
           ${MTR_ARGS} \
            --junit-output=${WORKDIR_ABS}/junit.full_mtr.xml \
            --junit-package="${DOCKER_OS}.${CMAKE_BUILD_TYPE}.full_mtr" || true

        mv $PWD/var $PWD/mtr_var
        killall -9 mysqld || true
    fi
fi

exit $status
