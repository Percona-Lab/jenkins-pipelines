#!/bin/bash


set -o errexit
set -o xtrace


# ------------------------------------------------------------------------------
# Declare all input variables
# ------------------------------------------------------------------------------
JOB_CMAKE=${JOB_CMAKE:-cmake}
COMPILER=${COMPILER:-default}
CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-RelWithDebInfo}
MAKE_OPTS=${MAKE_OPTS:--j$(grep -c ^processor /proc/cpuinfo)}
CMAKE_OPTS=${CMAKE_OPTS:-}
BUILD_COMMENT=${BUILD_COMMENT:-}
TAG=${TAG:-}
DIST_NAME=${DIST_NAME:-}
SSL_VER=${SSL_VER:-}
TARGET_CFLAGS=${TARGET_CFLAGS:-}


# ------------------------------------------------------------------------------
# set working dir
# ------------------------------------------------------------------------------
mkdir -p ${1:-./build}
WORKDIR=$(cd ${1:-./build}; pwd -P)
INSTALL_DIR=${WORKDIR}/DESTDIR
DOWNLOAD_DIR=${WORKDIR}/source_downloads
mkdir -p ${INSTALL_DIR} ${DOWNLOAD_DIR}
SOURCEDIR=$(cd ${2:-$(dirname $0)/../sources/pxb80}; pwd -P)


# ------------------------------------------------------------------------------
# download external libs
# ------------------------------------------------------------------------------
wget_loop() {
    local FILE="$1"
    local URL="$2"

    if [[ ! -f "${DOWNLOAD_DIR}/${FILE}" ]]; then
        until wget --progress=dot:giga -O "${DOWNLOAD_DIR}/${FILE}" "${URL}"; do
            echo "sleep before retry"
            sleep 1
        done
    fi
}

BOOST_VERSION=$(grep 'SET(BOOST_PACKAGE_NAME' ${SOURCEDIR}/cmake/boost.cmake | sed -re 's/.*([0-9]+_[0-9]+_[0-9]+).*/\1/')
wget_loop "boost_${BOOST_VERSION}.tar.gz" "http://downloads.sourceforge.net/boost/boost/${BOOST_VERSION//_/.}/boost_${BOOST_VERSION}.tar.gz"

if [ -f "${SOURCEDIR}/cmake/googletest.cmake" ]; then
    GMOCK_VERSION=$(grep 'SET(GMOCK_PACKAGE_NAME' ${SOURCEDIR}/cmake/googletest.cmake | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
    if [ -z ${GMOCK_VERSION} ]; then
        GMOCK_VERSION=$(grep 'SET(GOOGLETEST_RELEASE' ${SOURCEDIR}/cmake/googletest.cmake | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
    fi
else
    GMOCK_VERSION=$(grep 'SET(GMOCK_PACKAGE_NAME' ${SOURCEDIR}/unittest/gunit/CMakeLists.txt | sed -re 's/.*([0-9]+[.][0-9]+[.][0-9]+).*/\1/')
fi

wget_loop "googletest-release-${GMOCK_VERSION}.zip" "https://github.com/google/googletest/archive/release-${GMOCK_VERSION}.zip"


# ------------------------------------------------------------------------------
# Set OS/Arch flags
# ------------------------------------------------------------------------------
TARGET_ARCH="$(uname -m)"

export CC=${CC:-gcc}
export CXX=${CXX:-g++}
export CFLAGS=${CFLAGS:-}
export CXXFLAGS=${CXXFLAGS:-}
export MAKE_JFLAG=-j$(grep -c ^processor /proc/cpuinfo)

# ------------------------------------------------------------------------------
# Set compile options
# ------------------------------------------------------------------------------
if [[ "$COMPILER" != "default" ]]; then
    export CC=${COMPILER}
    export CXX=$(echo ${COMPILER} | sed -e 's/gcc/g++/; s/clang/clang++/')
fi

# CentOS 6 and 7
RHVER=0
if [[ -f /etc/redhat-release ]]; then
    RHVER="$(rpm --eval %rhel)"
fi

if [[ ${RHVER} -eq 6 ]] || [[ ${RHVER} -eq 7 ]]; then
    JOB_CMAKE='cmake3'
fi

# CentOS 6 and 7
if [[ -f /opt/rh/devtoolset-7/enable ]]; then
    source /opt/rh/devtoolset-7/enable
fi

# ------------------------------------------------------------------------------
# set version
# ------------------------------------------------------------------------------
source "$SOURCEDIR/XB_VERSION"
if [[ -n "$(which git)" ]] && [[ -d "$SOURCEDIR/.git" ]]; then
    REVISION="$(cd "$SOURCEDIR"; git rev-parse --short HEAD)"
fi
XTRABACKUP_VERSION="${XB_VERSION_MAJOR}.${XB_VERSION_MINOR}.${XB_VERSION_PATCH}${XB_VERSION_EXTRA}"
FULL_PRODUCT_NAME="percona-xtrabackup-$XTRABACKUP_VERSION-$(uname -s)-$(uname -m)"

# ------------------------------------------------------------------------------
# Finaly, compile!
# ------------------------------------------------------------------------------
pushd ${WORKDIR}
    ${JOB_CMAKE} \
        -DBUILD_CONFIG=xtrabackup_release \
        -DDOWNLOAD_BOOST=1 \
        -DWITH_BOOST=${DOWNLOAD_DIR} \
        -DCMAKE_INSTALL_PREFIX=${FULL_PRODUCT_NAME} \
        -DINSTALL_MYSQLTESTDIR=${FULL_PRODUCT_NAME}-test \
        -DINSTALL_MANDIR=man \
        -DMYSQL_UNIX_ADDR=/var/run/mysqld/mysqld.sock \
        -DFORCE_INSOURCE_BUILD=1 \
        ${TARGET_CFLAGS:+-DCMAKE_C_FLAGS="${TARGET_CFLAGS}" -DCMAKE_CXX_FLAGS="${TARGET_CFLAGS}"} \
        ${SOURCEDIR}
    make $MAKE_JFLAG
    make DESTDIR=${INSTALL_DIR} install > make_install.log
popd

tar -C ${INSTALL_DIR}${WORKDIR} --owner=0 --group=0 -czf "${WORKDIR}/${FULL_PRODUCT_NAME}.tar.gz" ${FULL_PRODUCT_NAME}
