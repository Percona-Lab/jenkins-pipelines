#!/bin/bash

set -o errexit
set -o xtrace
trap cleanup EXIT

function cleanup (){
  docker rm --force vault s3 kmip
}
ROOT_DIR=$(cd $(dirname $0)/../sources; pwd -P)
SCRIPTS_DIR=$(cd $(dirname $0)/../local; pwd -P)
SOURCE_IMAGE=${1:-centos:7}

if [[ ${SOURCE_IMAGE} == 'asan' ]]; then
    SOURCE_IMAGE='centos:7'
fi

function check_pxb_network() {
  if [[ $(docker network list | grep pxb_network) != *pxb_network* ]]; then
    docker network create pxb_network
  fi
}

if [[ ${WITH_AZURITE} == "ON" || ${WITH_XBCLOUD_TESTS} == "true" || ${WITH_VAULT_TESTS} == "true" || ${WITH_KMIP_TESTS} == "true" ]]; then
    DOCKER_NETWORK_FLAG="--network pxb_network"
fi

if [[ ${WITH_XBCLOUD_TESTS} == "true" ]]; then
  check_pxb_network
  docker run -d --security-opt seccomp=unconfined --cap-add=NET_ADMIN \
  --env PASSWORD=someStrongPWD --env USER=myuser -p 9000:9000 --rm \
  -p 9001:9001 ${DOCKER_NETWORK_FLAG} --name s3 satyapercona/minio:latest

  export S3_SERVER_IP=$(docker inspect s3 | egrep "\"IPAddress\": \"([0-9]{1,3}\.){3}[0-9]{1,3}" | awk -F'"' '{print $4}' | head -n 1)
  export XBCLOUD_CREDENTIALS="--storage=s3 --s3-endpoint='http://${S3_SERVER_IP}:9000' --s3-access-key=myuser --s3-secret-key=someStrongPWD --s3-bucket=newbucket"
fi

if [[ ${WITH_VAULT_TESTS} == "true" ]]; then
    check_pxb_network
    docker run -d --security-opt seccomp=unconfined --cap-add=NET_ADMIN --rm -p 8200:8200 ${DOCKER_NETWORK_FLAG} --name vault satyapercona/vault:latest
    docker cp vault:/opt/vault/tls/tls.crt ${ROOT_DIR}/vault.crt
    export VAULT_SERVER_IP=$(docker inspect vault | egrep "\"IPAddress\": \"([0-9]{1,3}\.){3}[0-9]{1,3}" | awk -F'"' '{print $4}' | head -n 1)
    export TOKEN=$(docker logs vault | grep 'export VAULT_TOKEN' | awk -F'=' '{print $2}')
    ATTEMPT=1
    while [ "${TOKEN}" == "" ];
    do
        sleep 2
        export TOKEN=$(docker logs vault | grep 'export VAULT_TOKEN' | awk -F'=' '{print $2}')
        if [[ ${ATTEMPT} -eq 10 ]]; then
            echo "Vault token not found"
            exit 1
        fi
        ATTEMPT=$((ATTEMPT+1))
    done

fi

if [[ ${WITH_KMIP_TESTS} == "true" ]]; then
    check_pxb_network
    # The certificate expires on Sep 23 15:02:39 2025 GMT and then docker image should be rebuilt.
    docker run -d --security-opt seccomp=unconfined --cap-add=NET_ADMIN --rm -p 5696:5696 ${DOCKER_NETWORK_FLAG} --name kmip satyapercona/kmip:latest

    docker cp kmip:/opt/certs/root_certificate.pem ${ROOT_DIR}
    docker cp kmip:/opt/certs/client_key_jane_doe.pem ${ROOT_DIR}
    docker cp kmip:/opt/certs/client_certificate_jane_doe.pem ${ROOT_DIR}
    export KMIP_SERVER_IP=$(docker inspect kmip | egrep "\"IPAddress\": \"([0-9]{1,3}\.){3}[0-9]{1,3}" | awk -F'"' '{print $4}' | head -n 1)
fi

XTRABACKUP_TARGET_VERSION=$(set | grep -i $XTRABACKUP_TARGET'_VERSION' | awk -F '=' '{print $2}')

docker run --rm \
    --security-opt seccomp=unconfined \
    --mount type=bind,source=${ROOT_DIR},destination=/tmp/pxb \
    --mount type=bind,source=${SCRIPTS_DIR},destination=/tmp/scripts \
    ${DOCKER_NETWORK_FLAG} \
    public.ecr.aws/e7j3v3n0/pxc-build:${SOURCE_IMAGE//[:\/]/-} \
    sh -c "
    set -o errexit
    set -o xtrace

    export CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'
    export XBTR_ARGS='${XBTR_ARGS}'
    export XTRABACKUP_TARGET='${XTRABACKUP_TARGET}'
    export XTRABACKUP_TARGET_VERSION='${XTRABACKUP_TARGET_VERSION}'
    export BOOTSTRAP_URL='${BOOTSTRAP_URL}'
    export WITH_AZURITE='${WITH_AZURITE}'
    export LANG=en_AU.UTF-8
    export XBCLOUD_CREDENTIALS='${XBCLOUD_CREDENTIALS}'
    export VAULT_IP='${VAULT_SERVER_IP}'
    export VAULT_URL=https://local.vault.com:8200
    export VAULT_CACERT=/tmp/pxb/vault.crt
    export VAULT_CA=/tmp/pxb/vault.crt
    export VAULT_TOKEN='${TOKEN}'
    export KMIP_CLIENT_CA=/tmp/pxb/client_certificate_jane_doe.pem
    export KMIP_CLIENT_KEY=/tmp/pxb/client_key_jane_doe.pem
    export KMIP_SERVER_CA=/tmp/pxb/root_certificate.pem
    export KMIP_SERVER_IP='${KMIP_SERVER_IP}'
    export KMIP_SERVER_ADDR='local.kmip.com'
    export KMIP_SERVER_PORT=5696
    mkdir /tmp/results
    cp /tmp/pxb/results/*.tar.gz /tmp/results

    bash -x /tmp/scripts/test-binary /tmp/results

    sudo mv /tmp/results/*.xml /tmp/results/*.output /tmp/results/test_results.subunit /tmp/results/results/ /tmp/pxb/results/ || true
    sudo chown $(id -u):$(id -g) -R /tmp/pxb/results/
"
