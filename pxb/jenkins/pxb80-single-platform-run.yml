- job:
    name: pxb80-single-platform-run
    project-type: matrix
    description: |
        Do not edit this job through the web!
    concurrent: true
    parameters:
    - string:
        name: PXB80_REPO
        default: https://github.com/percona/percona-xtrabackup
        description: URL to PXB80 repository
    - string:
        name: PXB80_BRANCH
        default: 8.0
        description: Tag/Branch for PXC repository
    - choice:
        name: JOB_CMAKE
        choices:
        - /usr/bin/cmake
        description: path to cmake binary
    - string:
        name: CMAKE_OPTS
        default:
        description: cmake options
    - string:
        name: MAKE_OPTS
        default:
        description: make options, like VERBOSE=1
    - string:
        name: XBTR_ARGS
        default: ""
        description: "./run.sh options, for options like: -j N Run tests in N parallel processes, -T seconds, -x options  Extra options to pass to xtrabackup"
    - label:
        name: OS_LABEL
        default: "min-xenial-x64"
        description: 'Choose OS platform from from this list
        [ min-centos-7-x64,
        min-centos-8-x64,
        min-xenial-x64,
        min-bionic-x64,
        min-focal-x64,
        min-stretch-x64,
        min-buster-x64 ]'
    - choice:
        name: XTRABACKUP_TARGET
        choices:
        - "innodb80"
        - "xtradb80"
        - "galera80"
        description: Choose MySQL version to run the test.
    - string:
          default: '8.0.20-11'
          description: Version of MS/PS/PXC Server which will be used for bootstrap.sh script
          name: XTRABACKUP_TARGET_VERSION
          trim: false
    - string:
        default: 'https://raw.githubusercontent.com/percona/percona-xtrabackup/8.0/storage/innobase/xtrabackup/test/bootstrap.sh'
        description: 'Pass an URL for downloading bootstrap.sh, If empty will use from repository you specified in PXB80_REPO'
        name: BOOTSTRAP_URL
        trim: false
    - choice:
        name: XBCLOUD_TYPE
        choices:
        - "aws"
        - "google"
        description: Choose XBCLOUD type to run the test.
    - password:
        default: 'Test@123'
        description: 'xbcloud access key'
        name: XBCLOUD_ACCESS_KEY
        trim: false
    - password:
        default: 'Test@123'
        description: 'xbcloud secret key'
        name: XBCLOUD_SECRET_KEY
        trim: false
    - string:
          default: ''
          description: XBCLOUD extra parameters
          name: XBCLOUD_EXTRA
          trim: false
    axes:
      - axis:
         type: user-defined
         name: CMAKE_BUILD_TYPE
         values:
          - RelWithDebInfo
    builders:
    - shell: |
          #!/bin/bash -xe

          if [[ "$XBCLOUD_TYPE" == "aws" ]]; then
              export XBCLOUD_CREDENTIALS="--storage=s3 --s3-access-key=$XBCLOUD_ACCESS_KEY --s3-secret-key=$XBCLOUD_SECRET_KEY $XBCLOUD_EXTRA"
          else
              export XBCLOUD_CREDENTIALS="--storage=google --google-access-key=$XBCLOUD_ACCESS_KEY --google-secret-key=$XBCLOUD_SECRET_KEY  $XBCLOUD_EXTRA"
          fi
          rm -rf jenkins-pipelines || true
          git clone https://github.com/Percona-Lab/jenkins-pipelines
          cd jenkins-pipelines
          if [ -f /usr/bin/yum ]; then
              sudo -E yum -y erase percona-release || true
              sudo find /etc/yum.repos.d/ -iname 'percona*' -delete
              until sudo -E yum -y install epel-release; do
                  sudo yum clean all
                  sleep 1
                  echo "waiting"
              done
              until sudo -E yum -y makecache; do
                  sudo yum clean all
                  sleep 1
                  echo "waiting"
              done

              RHEL=$(rpm --eval %rhel)
              sudo yum -y install wget
              PKGLIST="libcurl-devel cmake make gcc gcc-c++ libev-devel openssl-devel"
              PKGLIST="${PKGLIST} libaio-devel perl-DBD-MySQL vim-common ncurses-devel readline-devel"
              PKGLIST="${PKGLIST} zlib-devel libgcrypt-devel bison perl-Digest-MD5"
              PKGLIST="${PKGLIST} socat numactl-libs numactl"

              if [[ ${RHEL} != 8 ]]; then
                  PKGLIST+=" python-sphinx python-docutils"
              else
                  PKGLIST+=" python3-pip python3-setuptools python3-wheel wget ncurses-compat-libs lz4 lz4-devel"
              fi

              until sudo -E yum -y install ${PKGLIST}; do
                  echo "waiting"
                  sleep 1
              done

              if [[ ${RHEL} -eq 8 ]]; then
                  sudo /usr/bin/pip3 install sphinx
                  sudo ln -sf /bin/python3 /bin/python
              fi
          fi
          #
          if [ -f /usr/bin/apt-get ]; then

              sudo rm -f /etc/apt/sources.list.d/percona-dev.list
              #
              until sudo -E apt-get update; do
                  sleep 1
                  echo "waiting"
              done
              #
              until sudo -E apt-get -y install lsb-release; do
                  sleep 1
                  echo "waiting"
              done
              #
              sudo -E apt-get -y purge eatmydata || true
              #
              DIST=$(lsb_release -sc)

              if [[ "$DIST" != 'focal' ]]; then
                  echo "deb http://jenkins.percona.com/apt-repo/ ${DIST} main" | sudo tee /etc/apt/sources.list.d/percona-dev.list
                  wget -q -O - http://jenkins.percona.com/apt-repo/8507EFA5.pub | sudo apt-key add -
                  wget -q -O - http://jenkins.percona.com/apt-repo/CD2EFD2A.pub | sudo apt-key add -
              fi

              until sudo -E apt-get update; do
                  sleep 1
                  echo "waiting"
              done
              #
              PKGLIST="bison cmake devscripts debconf debhelper automake bison ca-certificates libcurl4-openssl-dev"
              PKGLIST="${PKGLIST} cmake debhelper libaio-dev libncurses-dev libssl-dev libtool libz-dev"
              PKGLIST="${PKGLIST} libgcrypt-dev libev-dev lsb-release python-docutils"
              PKGLIST="${PKGLIST} build-essential rsync libdbd-mysql-perl libnuma1 socat librtmp-dev liblz4-tool liblz4-1 liblz4-dev libtinfo5"
              if [[ "$DIST" == 'focal' ]]; then
                  PKGLIST="${PKGLIST} python3-sphinx"
              else
                  PKGLIST="${PKGLIST} python-sphinx"
              fi

              if [[ "$Host" == *"asan" ]] ; then
                  PKGLIST="${PKGLIST} libasan4 pkg-config"
              fi
              until sudo -E DEBIAN_FRONTEND=noninteractive apt-get -y install ${PKGLIST}; do
                  sleep 1
                  echo "waiting"
              done
              #
              sudo -E apt-get -y install libreadline6 || true
              sudo -E apt-get -y install libreadline6-dev || true
              if [ -e /lib/x86_64-linux-gnu/libreadline.so.7 -a ! -e /lib/x86_64-linux-gnu/libreadline.so.6 ]; then
                  sudo ln -s /lib/x86_64-linux-gnu/libreadline.so.7 /lib/x86_64-linux-gnu/libreadline.so.6
              fi

              if [ -e /lib/x86_64-linux-gnu/libreadline.so -a ! -e /lib/x86_64-linux-gnu/libreadline.so.6 ]; then
                  sudo ln -s /lib/x86_64-linux-gnu/libreadline.so /lib/x86_64-linux-gnu/libreadline.so.6
              fi

              if [[ ${DIST} == 'focal' ]]; then
                  sudo ln -sf /usr/bin/python3 /usr/bin/python
              fi

          fi
          # sudo is needed for better node recovery after compilation failure
          # if building failed on compilation stage directory will have files owned by docker user
          sudo git reset --hard
          sudo git clean -xdf
          sudo rm -rf sources
          ./pxb/jenkins/checkout PXB80
          mkdir $PWD/pxb/sources/pxb80/results
          bash -x ./pxb/jenkins/build-binary-pxb80 $PWD/pxb/sources/pxb80/results $PWD/pxb/sources/pxb80
          bash -x ./pxb/jenkins/test-binary-pxb80  $PWD/pxb/sources/pxb80/results
          cp $PWD/pxb/sources/pxb80/results/junit.xml ${WORKSPACE}

    wrappers:
    - mask-passwords
    publishers:
    - junit:
        results: "junit.xml"
        keep-long-stdio: true
